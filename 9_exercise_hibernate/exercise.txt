
1)
create maven project with following dependencies in pom

-- hibernate and h2

    <dependencies>
        <dependency>
		    <groupId>com.h2database</groupId>
		    <artifactId>h2</artifactId>
		    <version>1.4.199</version>
		</dependency>
  
	  <dependency>
	    <groupId>org.hibernate</groupId>
	    <artifactId>hibernate-core</artifactId>
	    <version>5.2.8.Final</version>
	  </dependency>
  </dependencies>
  
2) 
  add maven plugin under build section and configure source directory
  
  <sourceDirectory>src</sourceDirectory>
    <resources>
      <resource>
        <directory>src</directory>
        <excludes>
          <exclude>**/*.java</exclude>
        </excludes>
      </resource>
    </resources>
	
       <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.1</version>
        <configuration>
          <source>1.8</source>
          <target>1.8</target>
        </configuration>
      </plugin>
	  
3) create hibernate.cfg.xml in src/main/resources

<hibernate-configuration>
<session-factory>
  			<!-- <property name="hbm2ddl.auto">create</property> -->
  			
        <property name="hibernate.connection.driver_class">org.h2.Driver</property>
		<property name="hibernate.connection.url">jdbc:h2:mem:test;DB_CLOSE_DELAY=-1</property>
				<!-- jdbc:h2:!/test -->
		<property name="hibernate.connection.username">sa</property>
		<property name="hibernate.connection.password"></property>
		<property name="hibernate.connection.pool_size">10</property>
		<property name="show_sql">true</property>
		<property name="hibernate.dialect">org.hibernate.dialect.H2Dialect</property>
		<property name="hibernate.current_session_context_class">thread</property>

		<!-- TODO fill in mapping <mapping class="" /> -->
		<!-- <property name="packagesToScan" value="your.package.name"/> -->

</session-factory>
</hibernate-configuration>

4) create entity class like below .. add more fields...

@Entity
@Table(name = "person")
public class Person implements Serializable{

	@Id
	@GeneratedValue 
	@Column(name="id")
	private int id;	

	@Column(name="name")
	private String name;

5) add Person entity class in hibernate.cfg file mapping...

6) create hibernate session factory

	public static SessionFactory getSessionFactory() {

		SessionFactory sessionFactory;
		try {
			StandardServiceRegistry standardRegistry = new StandardServiceRegistryBuilder()
					.configure("hibernate.cfg.xml").build();
			Metadata metaData = new MetadataSources(standardRegistry).getMetadataBuilder().build();
			sessionFactory = metaData.getSessionFactoryBuilder().build();
		} catch (Throwable th) {

			System.err.println("Enitial SessionFactory creation failed" + th);
			throw new ExceptionInInitializerError(th);

		}
		return sessionFactory;
	
	
7) use session factory and save Person entity to h2 in memory db (or file based h2 db).

		Session session = sessFactory.getCurrentSession();
		session.save(person);
		
hint: session object gives handle to start txn		

8) read data from person table...  

session.createQuery("from Person", Person.class).list()

9) setup one to one relationship, test.
10) close connection and access object loaded in step 9... what will happen in  lazy loading?  vs eager loading..
	